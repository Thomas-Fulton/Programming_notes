# http://www.mewbies.com/acute_terminal_fun_01_get_ascii-fied_on_the_terminal.htm
# https://www.tecmint.com/funny-linux-commands/

## nCPUs or cores ## 
htop  # see each core and usage at the top of the terminal
scpu | egrep 'Model name|Socket|Thread|NUMA|CPU\(s\)'  # get n


   ###  File System Hierarchy  ###
/usr/
  # unix system resources - don't change
 /usr/local/
  # The /usr/local hierarchy is for use by the system administrator when installing software locally. It needs to be safe from being overwritten when the system software is updated.
  /usr/local/bin/
  /usr/local/lib/
  /usr/local/share/
  # most programs are installed here: not affected by a system software update like files in /usr/
  # similar to the root directory structure
  # becomes messy quickly: the system can identify what file is used by what program but it is not human friendly. Therefore, additional software can be install to /opt/ instead.
/opt/  
  # for add-on packages and software, and can be much more human readable.
  # new directory for each software/program
  # create dirs here to install your own programs (then either create symlink from opt/dir to local/bin, or add opt/dir/bin $PATH)
/etc/
  # mostly configuration files of programs

   ###  Installing programs  ###
  ##  Apt  ##


  ##  Manual installation  ##
# https://itsfoss.com/install-software-from-source-code/
# Follow the FSH (File system hierarchy)

# When in doubt, make a directory /opt/program_name, and install to there:
mkdir /opt/myprog-1.0
git clone myprog-1.0.git
cd /opt/myprog-1.0
./configure --prefix=/opt/myprog-1.0

# Now your program can be ran using the full path:
/opt/myprog-1.0/bin/myprog-1.0

# To run the program more easily by just typing the name either: add to $PATH, or make a symlink to eg.local/bin.
# Export to $PATH: 
export PATH=/opt/myprog-1.0/bin:$PATH 
# Create symlink:
ln -s my_prog-1.0/bin/executable /usr/local/bin/
ln -s my_prog-1.0/bin/executable /home/wfulton/bin/


############## Custom preferences ###################
# Commands to run on terminal startup

## For "notes" profile ##
# Put following into custom command in profile:
sh -c 'cd ~/Documents/Programming_notes; exec "${SHELL:-sh}"'

## For "serious work" profile ##
# see ~/wisdom_from_an_old_friend.sh. Put following into custom command in profile:
sh -c 'cd ~ ; ./wisdomFromAnOldFriend.sh; exec "${SHELL:-sh}"'
similar to content of wisdomFromAnOldFriend.sh:
echo -e '\n\nTOM\n\n\nURGENT TRANSMISSION INCOMING: REQUIRES IMMEDIATE ATTENTION\n\n\nMESSAGE FROM:\n\n' | pv -qL 20 ; echo '    "CAFFEINATED COW?"' | lolcat -p 0.5 -a -d 50 -s 40 ; echo -e '\n\nMESSAGE FOLLOWS...\n\n' | pv -qL 20 ; sleep 3 ; fortune | cowsay | lolcat -p 0.5 -a -d 100 -s 100; echo -e "\n\nWISDOM ENDS" | pv -qL 20

echo -e '\n\nTOM\n\n\nURGENT TRANSMISSION INCOMING: REQUIRES IMMEDIATE ATTENTION\n\n\nMESSAGE FROM:\n\n' | pv -qL 20 ; sleep 2 ; echo '    "Caffeinated Cow"' | lolcat -p 0.5 -a -d 300 -s 40 ; echo -e '\n\nMESSAGE FOLLOWS...\n\n' | pv -qL 20 ; sleep 3 ; fortune | cowsay | lolcat -p 0.5 -a -d 15 -s 40; echo -e "\n\nWISDOM ENDS" | pv -qL 20


## For caffeine profile ##
# Install caffeine-indicator. To auto-activate: "caffeine-indicator is a python script. I also wanted it to auto-activate, so I edited it to do so. sudo vi /usr/bin/caffeine-indicator then in the class Caffeine() def __Init__() Add a last line in that function self.toggle_activated()"
# Put following into custom command in profile:
sh -c 'cd ~ ;caffeine-indicator'

