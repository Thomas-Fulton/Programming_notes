  
https://imperialcollegelondon.github.io/research-computing-tips/rse/2020/04/15/git-oneline-log-alias.html
LOOOOOOOOK ^
 



    #### setup ####
git config --global user.name "Thomas-Fulton"
git config --global user.email "thomas@fultondesigns.co.uk"
git config --get remote.origin.url   # see remote origin url


    #### Create new repo ####
# create repository on github.com first, then create locally and link remote repo:

# -----------------------------------------------
Use GIT CLONE not git init instructions like below...
# -----------------------------------------------

git init  # create git repository locally

git add README.md

git commit -m "first commit"

git branch -M main  # Rename "master" (default) to "main"  # if you forget and can't merge use "--allow-unrelated-histories"

git remote add origin https://github.com/Thomas-Fulton/Programming.git  # creates link to newly created repository

git remote add origin git@github.com:Thomas-Fulton/scRNA-analysis.git

git push -u origin main


# (TODO what's the difference?) Set the remote origin: the remote branch which is pushed and pulled to
git push --set-upstream origin main


git add/commit/push files


    #### Conflicts ####
# use git diff <file> to see conflicts
# edit file to resolve in vim - shown with >>>>>> etc
# add and commit resolved file
# push then pull


    #### useful commands ####

git add FILENAME

git add --patch  # goes through changes, choose to include change to add so a commit can retroactively be split up into logical commits. "y" yes add this hunk, "n" no don't add hunk, "s" split hunk into individual changes, "d" don't add this hunk and all remaining hunks.

git commit -m "Commit 3"
    # good message should have a title roughly less than 52 characters long, and be told in the imperative, eg. If applied, this commit will: (Title of commit)
    
    # add details in paragraph separated by blank line <-- FINISH
    
git status

git push


    ## branching ##

git branch "branch-name"  # creates new branch
git branch -a  # list branches
git checkout "master/branch-name"  # switches between branches - changes all files in working directory to the files in the branch that you have just switched to.
git branch -d "branch-name"  # delete branch

    ## merging ##
git checkout "main"  # move to master branch you want update 
git merge "branch"  # merge branch "branch" with current working branch "main"


  ## UNDO local commit before pushing ##
git reset HEAD~1 --soft  # undo your last commit while leaving your working tree (the state of your files on disk) untouched.
git reset Head~1 --hard  # undoes your last commit and edits files to state of previous commit 
 # ~1  go back 1 commit.

  ## undo local change (restore to remote version)
git checkout -- <file/s>

# Amend files in last commit: eg.Realize you forgot to add the changes from main.py 
git add main.py 
git commit --amend --no-edit  # to change files of last commit, --no-edit must be present. To change commit message just --amend will do.
# see https://www.atlassian.com/git/tutorials/rewriting-history for amending older commits

## add section on stashing and commit ammending



## Git Markdown notes ##

